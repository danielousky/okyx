-# frozen_string_literal: true
= simple_form_for(@service, wrapper: :floating_labels_form) do |f|
  = f.error_notification
  = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?
  - required = !current_user.admin?
  .form-inputs
    - # Cédula o RIF
    = f.hint 'Indique documento de identidad'
    .row
      = f.input :condition, required: required, selected: Service.conditions.first, collection: Service.conditions.keys, wrapper: :floating_labels_select, wrapper_html: {class: 'col-4 pe-0'}, label_html: {class: 'ms-2 mt-1 pt-1 pb-0'}
      = f.input :code, required: required, as: :string, wrapper_html: {class: 'col-8 ps-0'}, input_html: {class: 'onlyNumbers maxSize', size: 10}, label_html: {class: 'ms-3'}
    
    - # Nombre
    = f.hint "Indique el nombre del servicio si lo tiene o cómo desea ser contactado por sus potenciales clientes"
    = f.input :name, required: true

    - # Descripción:
    = f.hint 'Indique brevemente en qué consiste especificamente el servicio que ofrece, para ampliar la información a sus clientes potenciales, indique especialidad, cualidades innovadoras, exclusivas y sobresalientes'
    = f.input :details, as: :text, input_html: {style: 'height:100px'}

    - # Imágen:
    %div{style: 'background-color:#F4F4F4'}
      = f.hint 'Agregue el logo del servicio o foto de la persona que ofrece sus servicios personales'
      = f.input :profile, label_html: {class: 'p-2', style: 'font-size: 13px;color: grey;'}, input_html: {class: 'mb-0'}, wrapper_html: {class: 'border'}
      %img#image_preview.img-fluid.p-2{src: '', style: 'display:none; max-width: 100px; max-height: 100px;'}
    
    - # Categorías:
    = f.hint 'Seleccione tantas opciones como describan su servicio.'
    =# f.association :areas, wrapper: :floating_labels_select, input_html: {style: 'height:150px'}
    = f.association :areas, as: :check_boxes, input_html: {class: 'btn me-2 btn-outline-secondary'} #, label_html: { class: "btn btn-secondary" } #, wrappe
    .form-check.mb-3
      %input#service_area_ids_0.form-check-input.check_boxes.btn.me-2.btn-outline-secondary{type: "checkbox", value: 0, name: "service[area_ids][]"}
      %label.form-check-label.collection_check_boxes{for: "service_area_ids_0"} 
        #service_area_label_other Otro
        = text_field_tag 'service_area_name', params[:service_area_name], class: 'form-control d-none required', required: true

    - # Teléfono
    = f.hint 'Indique el número telefónico de contacto para el servicio'
    .row
      - operators_code = ['0412', '0414', '0424', '0416','0426']
      = f.input :contact_phone_code, collection: operators_code, include_blank: 'Seleccione', wrapper: :floating_labels_select, wrapper_html: {class: 'col-4 pe-0'}, label_html: {class: 'ms-3'}
      = f.input :contact_phone, as: :tel, input_html: {class: 'onlyNumbers maxSize', size: 7}, wrapper_html: {class: 'col-8 ps-0'}, label_html: {class: 'ms-3'}

      = f.input :secundary_contact_phone_code, collection: operators_code, include_blank: 'Seleccione', wrapper: :floating_labels_select, wrapper_html: {class: 'col-4 pe-0'}, label_html: {class: 'ms-3'}
      = f.input :secundary_contact_phone, as: :tel, input_html: {class: 'onlyNumbers maxSize', size: 7}, wrapper_html: {class: 'col-8 ps-0'}, label_html: {class: 'ms-3'}

    = f.hint 'Enlace a principal red social para ampliar información'
    = f.input :link
    
    = f.hint 'Ubicación a dónde ofertará su servicio'
    = f.input :location, collection: Service.states, wrapper: :floating_labels_select, include_blank: 'Seleccione'
    
    - if !current_user.admin?
      - @user = params[:user_id] ? User.find(params[:user_id]) : current_user
      - if @user&.name_incompleted?
        %hr
        = title 'Sus datos personales como responsable del servicio'
        = hidden_field_tag '[user]id', @user.id, required: true
        .form-floating.mb-3.user_first_name.required
          = text_field_tag 'user[first_name]', @user.first_name, required: true, class: 'form-control required'
          = label 'user','first_name', class: 'required'
        .form-floating.mb-3.user_last_name.required
          = text_field_tag 'user[last_name]', @user.first_name, required: true, class: 'form-control required'
          = label 'user','last_name', class: 'required'

      - if true #action_name.eql? 'new'
        - content = render partial: '/layouts/terminos_legales'
        - id = 'legal_conditions'
        - title = 'Términos y condiciones legales'
        = render partial: '/layouts/modal-scaffold', locals: {content: content, id: id, title: title}
        .bg-warning.p-1.bg-opacity-75.mb-3
          = f.input :conditions_accepted, label: "Declaro que acepto los términos y condiciones expuestas <a class='link' data-bs-target='#legal_conditions' data-bs-toggle='modal'>aquí</a>".html_safe, wrapper_html: {class: 'p-3'}
  
  .form-actions
    = f.button :submit, class: 'btn btn-success disabled', data: {disable_with: 'Guardando...'}, id: 'submit_service'

:javascript
  // Encontrar evento onclick del elemento service_area_other
  // Uncaught SyntaxError: Identifier 'other' has already been declared
  document.addEventListener('DOMContentLoaded', function () {
    const other = document.getElementById('service_area_ids_0');
    // Mostrar campo de texto para el nombre de la categoría
    other.addEventListener('click', () => {
      document.getElementById('service_area_name').classList.toggle('d-none');
      document.getElementById('service_area_label_other').classList.toggle('d-none');

    });
    
    // Preview de la imagen
    const image_preview = document.getElementById('service_profile');
    image_preview.addEventListener('change', function(event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const img = document.getElementById('image_preview');
          img.src = e.target.result;
          img.style.display = 'block';
        }
        reader.readAsDataURL(file);
      }
    });

    let conditions_accepted = document.getElementById('service_conditions_accepted');
    conditions_accepted.addEventListener('change', function(event) {
      const button = document.getElementById('submit_service');
      button.classList.toggle('disabled');
    });

  });
  





